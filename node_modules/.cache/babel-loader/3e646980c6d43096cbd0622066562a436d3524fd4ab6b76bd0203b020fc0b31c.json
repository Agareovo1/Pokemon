{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\REACT\\\\POKEMON\\\\pokemon\\\\src\\\\Components\\\\pokemon\\\\Pokemon.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TYPE_COLORS = {\n  // ... (rest of the type colors)\n};\nexport default class Pokemon extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // ... (rest of the state properties)\n    };\n  }\n  async componentDidMount() {\n    const {\n      pokemonIndex\n    } = this.props.match.params;\n\n    // URLs for pokemon information\n    const pokemonUrl = `https://pokeapi.co/api/v2/pokemon/${pokemonIndex}/`;\n    const pokemonSpeciesUrl = `https://pokeapi.co/api/v2/pokemon-species/${pokemonIndex}/`;\n\n    // Get pokemon information\n    const pokemonRes = await axios.get(pokemonUrl);\n    const name = pokemonRes.data.name;\n    const imageUrl = pokemonRes.data.sprites.front_default;\n    let {\n      hp,\n      attack,\n      defense,\n      speed,\n      specialAttack,\n      specialDefense\n    } = this.state;\n    pokemonRes.data.stats.forEach(stat => {\n      switch (stat.stat.name) {\n        case 'hp':\n          hp = stat.base_stat;\n          break;\n        case 'attack':\n          attack = stat.base_stat;\n          break;\n        // ... (handle other stats similarly)\n        default:\n          break;\n      }\n    });\n\n    // Convert decimeter to feet\n    const height = Math.round(pokemonRes.data.height * 0.328084 * 100) / 100;\n    const weight = Math.round(pokemonRes.data.weight * 0.220462 * 100) / 100;\n    const types = pokemonRes.data.types.map(type => type.type.name);\n    const abilities = pokemonRes.data.abilities.map(ability => {\n      return ability.ability.name.toLowerCase().split('-').map(s => s.charAt(0).toUpperCase() + s.substring(1)).join(' ');\n    });\n    const evs = pokemonRes.data.stats.filter(stat => stat.effort > 0).map(stat => {\n      return `${stat.effort} ${stat.stat.name}`.toLowerCase().split('-').map(s => s.charAt(0).toUpperCase() + s.substring(1)).join(' ');\n    }).join(', ');\n\n    // Get Pokemon Description, Catch Rate, Egg Group, Gender Ratio\n    await axios.get(pokemonSpeciesUrl).then(res => {\n      let description = '';\n      res.data.flavor_text_entries.some(flavor => {\n        if (flavor.language.name === 'en') {\n          description = flavor.flavor_text;\n          return;\n        }\n      });\n      const femaleRate = res.data['gender_rate'];\n      const genderRatioFemale = 12.5 * femaleRate;\n      const genderRatioMale = 12.5 * (8 - femaleRate);\n      const catchRate = Math.round(100 / 255 * res.data['capture_rate']);\n      const eggGroups = res.data['egg_groups'].map(group => {\n        return group.name.toLowerCase().split(' ').map(s => s.charAt(0).toUpperCase() + s.substring(1)).join(' ');\n      }).join(', ');\n      const hatchSteps = 255 * (res.data['hatch_counter'] + 1);\n      this.setState({\n        description,\n        genderRatioFemale,\n        genderRatioMale,\n        catchRate,\n        eggGroups,\n        hatchSteps\n      });\n    });\n    this.setState({\n      imageUrl,\n      pokemonIndex,\n      name,\n      types,\n      stats: {\n        hp,\n        attack,\n        defense,\n        speed,\n        specialAttack,\n        specialDefense\n      },\n      height,\n      weight,\n      abilities,\n      evs\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","axios","jsxDEV","_jsxDEV","TYPE_COLORS","Pokemon","constructor","args","state","componentDidMount","pokemonIndex","props","match","params","pokemonUrl","pokemonSpeciesUrl","pokemonRes","get","name","data","imageUrl","sprites","front_default","hp","attack","defense","speed","specialAttack","specialDefense","stats","forEach","stat","base_stat","height","Math","round","weight","types","map","type","abilities","ability","toLowerCase","split","s","charAt","toUpperCase","substring","join","evs","filter","effort","then","res","description","flavor_text_entries","some","flavor","language","flavor_text","femaleRate","genderRatioFemale","genderRatioMale","catchRate","eggGroups","group","hatchSteps","setState","render","className","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/HP/Desktop/REACT/POKEMON/pokemon/src/Components/pokemon/Pokemon.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TYPE_COLORS = {\r\n  // ... (rest of the type colors)\r\n};\r\n\r\nexport default class Pokemon extends Component {\r\n  state = {\r\n    // ... (rest of the state properties)\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { pokemonIndex } = this.props.match.params;\r\n\r\n    // URLs for pokemon information\r\n    const pokemonUrl = `https://pokeapi.co/api/v2/pokemon/${pokemonIndex}/`;\r\n    const pokemonSpeciesUrl = `https://pokeapi.co/api/v2/pokemon-species/${pokemonIndex}/`;\r\n\r\n    // Get pokemon information\r\n    const pokemonRes = await axios.get(pokemonUrl);\r\n    const name = pokemonRes.data.name;\r\n    const imageUrl = pokemonRes.data.sprites.front_default;\r\n\r\n    let { hp, attack, defense, speed, specialAttack, specialDefense } = this.state;\r\n    pokemonRes.data.stats.forEach(stat => {\r\n      switch (stat.stat.name) {\r\n        case 'hp':\r\n          hp = stat.base_stat;\r\n          break;\r\n        case 'attack':\r\n          attack = stat.base_stat;\r\n          break;\r\n        // ... (handle other stats similarly)\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    // Convert decimeter to feet\r\n    const height = Math.round(pokemonRes.data.height * 0.328084 * 100) / 100;\r\n    const weight = Math.round(pokemonRes.data.weight * 0.220462 * 100) / 100;\r\n\r\n    const types = pokemonRes.data.types.map(type => type.type.name);\r\n\r\n    const abilities = pokemonRes.data.abilities.map(ability => {\r\n      return ability.ability.name\r\n        .toLowerCase()\r\n        .split('-')\r\n        .map(s => s.charAt(0).toUpperCase() + s.substring(1))\r\n        .join(' ');\r\n    });\r\n\r\n    const evs = pokemonRes.data.stats\r\n      .filter(stat => stat.effort > 0)\r\n      .map(stat => {\r\n        return `${stat.effort} ${stat.stat.name}`\r\n          .toLowerCase()\r\n          .split('-')\r\n          .map(s => s.charAt(0).toUpperCase() + s.substring(1))\r\n          .join(' ');\r\n      })\r\n      .join(', ');\r\n\r\n    // Get Pokemon Description, Catch Rate, Egg Group, Gender Ratio\r\n    await axios.get(pokemonSpeciesUrl).then(res => {\r\n      let description = '';\r\n      res.data.flavor_text_entries.some(flavor => {\r\n        if (flavor.language.name === 'en') {\r\n          description = flavor.flavor_text;\r\n          return;\r\n        }\r\n      });\r\n      const femaleRate = res.data['gender_rate'];\r\n      const genderRatioFemale = 12.5 * femaleRate;\r\n      const genderRatioMale = 12.5 * (8 - femaleRate);\r\n\r\n      const catchRate = Math.round((100 / 255) * res.data['capture_rate']);\r\n\r\n      const eggGroups = res.data['egg_groups']\r\n        .map(group => {\r\n          return group.name\r\n            .toLowerCase()\r\n            .split(' ')\r\n            .map(s => s.charAt(0).toUpperCase() + s.substring(1))\r\n            .join(' ');\r\n        })\r\n        .join(', ');\r\n\r\n      const hatchSteps = 255 * (res.data['hatch_counter'] + 1);\r\n\r\n      this.setState({\r\n        description,\r\n        genderRatioFemale,\r\n        genderRatioMale,\r\n        catchRate,\r\n        eggGroups,\r\n        hatchSteps\r\n      });\r\n    });\r\n\r\n    this.setState({\r\n      imageUrl,\r\n      pokemonIndex,\r\n      name,\r\n      types,\r\n      stats: {\r\n        hp,\r\n        attack,\r\n        defense,\r\n        speed,\r\n        specialAttack,\r\n        specialDefense\r\n      },\r\n      height,\r\n      weight,\r\n      abilities,\r\n      evs\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='col'>\r\n        {/* ... (rest of the JSX code) */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}